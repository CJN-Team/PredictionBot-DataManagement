// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace PredictionBot_DataManagement_Infrastructure.Migrations
{
    [DbContext(typeof(DataManagementDbContext))]
    partial class DataManagementDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("PredictionBot_DataManagement_Domain.Models.CalculatedParametersHistoricalData", b =>
                {
                    b.Property<string>("CalculatedParameterId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("calculated_parameter_id")
                        .HasDefaultValueSql("''");

                    b.Property<float>("CalculatedValue")
                        .HasColumnType("float")
                        .HasColumnName("calculated_value");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("end_date");

                    b.Property<string>("ParameterId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("parameter_id")
                        .HasDefaultValueSql("''");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("start_date");

                    b.HasKey("CalculatedParameterId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ParameterId" }, "parameter_id");

                    b.ToTable("calculatedparametershistoricaldata", (string)null);
                });

            modelBuilder.Entity("PredictionBot_DataManagement_Domain.Models.CalculatedParametersHistoricalDataMapping", b =>
                {
                    b.Property<string>("MappingId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("mapping_id")
                        .HasDefaultValueSql("''");

                    b.Property<string>("CalculatedParameterId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("calculated_parameter_id")
                        .HasDefaultValueSql("''");

                    b.Property<string>("DataId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("data_id")
                        .HasDefaultValueSql("''");

                    b.HasKey("MappingId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CalculatedParameterId" }, "calculated_parameter_id");

                    b.HasIndex(new[] { "DataId" }, "data_id");

                    b.ToTable("calculatedparametershistoricaldatamapping", (string)null);
                });

            modelBuilder.Entity("PredictionBot_DataManagement_Domain.Models.Currency", b =>
                {
                    b.Property<string>("CurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("currency_id")
                        .HasDefaultValueSql("''");

                    b.Property<string>("CurrencyName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("currency_name")
                        .HasDefaultValueSql("''");

                    b.Property<string>("CurrencySymbol")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("currency_symbol")
                        .HasDefaultValueSql("''");

                    b.HasKey("CurrencyId")
                        .HasName("PRIMARY");

                    b.ToTable("currency", (string)null);
                });

            modelBuilder.Entity("PredictionBot_DataManagement_Domain.Models.Exchange", b =>
                {
                    b.Property<string>("ExchangeId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("exchange_id")
                        .HasDefaultValueSql("''");

                    b.Property<string>("ExchangeName")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("exchange_name");

                    b.Property<string>("Timezone")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("timezone");

                    b.HasKey("ExchangeId")
                        .HasName("PRIMARY");

                    b.ToTable("exchange", (string)null);
                });

            modelBuilder.Entity("PredictionBot_DataManagement_Domain.Models.HistoricalData", b =>
                {
                    b.Property<string>("DataId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("data_id")
                        .HasDefaultValueSql("''");

                    b.Property<float>("ClosePrice")
                        .HasColumnType("float")
                        .HasColumnName("close_price");

                    b.Property<DateTime>("Datetime")
                        .HasColumnType("datetime")
                        .HasColumnName("datetime");

                    b.Property<float>("HighPrice")
                        .HasColumnType("float")
                        .HasColumnName("high_price");

                    b.Property<string>("IntervalId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("interval_id")
                        .HasDefaultValueSql("''");

                    b.Property<float>("LowPrice")
                        .HasColumnType("float")
                        .HasColumnName("low_price");

                    b.Property<float>("OpenPrice")
                        .HasColumnType("float")
                        .HasColumnName("open_price");

                    b.Property<string>("SymbolId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("symbol_id")
                        .HasDefaultValueSql("''");

                    b.Property<float>("Volume")
                        .HasColumnType("float")
                        .HasColumnName("volume");

                    b.HasKey("DataId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IntervalId" }, "interval_id");

                    b.HasIndex(new[] { "SymbolId" }, "symbol_id");

                    b.ToTable("historicaldata", (string)null);
                });

            modelBuilder.Entity("PredictionBot_DataManagement_Domain.Models.Interval", b =>
                {
                    b.Property<string>("IntervalId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("interval_id")
                        .HasDefaultValueSql("''");

                    b.Property<string>("IntervalName")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("interval_name");

                    b.HasKey("IntervalId")
                        .HasName("PRIMARY");

                    b.ToTable("interval", (string)null);
                });

            modelBuilder.Entity("PredictionBot_DataManagement_Domain.Models.Parameter", b =>
                {
                    b.Property<string>("ParameterId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("parameter_id")
                        .HasDefaultValueSql("''");

                    b.Property<string>("ParameterName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("parameter_name")
                        .HasDefaultValueSql("''");

                    b.HasKey("ParameterId")
                        .HasName("PRIMARY");

                    b.ToTable("parameters", (string)null);
                });

            modelBuilder.Entity("PredictionBot_DataManagement_Domain.Models.Symbol", b =>
                {
                    b.Property<string>("SymbolId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("symbol_id")
                        .HasDefaultValueSql("''");

                    b.Property<string>("CurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("currency_id")
                        .HasDefaultValueSql("''");

                    b.Property<string>("ExchangeId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("exchange_id")
                        .HasDefaultValueSql("''");

                    b.Property<string>("SymbolName")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("symbol_name");

                    b.HasKey("SymbolId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CurrencyId" }, "currency_id");

                    b.HasIndex(new[] { "ExchangeId" }, "exchange_id");

                    b.ToTable("symbol", (string)null);
                });

            modelBuilder.Entity("PredictionBot_DataManagement_Domain.Models.CalculatedParametersHistoricalData", b =>
                {
                    b.HasOne("PredictionBot_DataManagement_Domain.Models.Parameter", "Parameter")
                        .WithMany("CalculatedParametersHistoricalData")
                        .HasForeignKey("ParameterId")
                        .HasConstraintName("parameter_id");

                    b.Navigation("Parameter");
                });

            modelBuilder.Entity("PredictionBot_DataManagement_Domain.Models.CalculatedParametersHistoricalDataMapping", b =>
                {
                    b.HasOne("PredictionBot_DataManagement_Domain.Models.CalculatedParametersHistoricalData", "CalculatedParameter")
                        .WithMany("CalculatedParametersHistoricalDataMappings")
                        .HasForeignKey("CalculatedParameterId")
                        .HasConstraintName("calculated_parameter_id");

                    b.HasOne("PredictionBot_DataManagement_Domain.Models.HistoricalData", "Data")
                        .WithMany("CalculatedParametersHistoricalDataMappings")
                        .HasForeignKey("DataId")
                        .HasConstraintName("data_id");

                    b.Navigation("CalculatedParameter");

                    b.Navigation("Data");
                });

            modelBuilder.Entity("PredictionBot_DataManagement_Domain.Models.HistoricalData", b =>
                {
                    b.HasOne("PredictionBot_DataManagement_Domain.Models.Interval", "Interval")
                        .WithMany("HistoricalData")
                        .HasForeignKey("IntervalId")
                        .HasConstraintName("interval_id");

                    b.HasOne("PredictionBot_DataManagement_Domain.Models.Symbol", "Symbol")
                        .WithMany("Historicaldata")
                        .HasForeignKey("SymbolId")
                        .HasConstraintName("symbol_id");

                    b.Navigation("Interval");

                    b.Navigation("Symbol");
                });

            modelBuilder.Entity("PredictionBot_DataManagement_Domain.Models.Symbol", b =>
                {
                    b.HasOne("PredictionBot_DataManagement_Domain.Models.Currency", "Currency")
                        .WithMany("Symbols")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("currency_id");

                    b.HasOne("PredictionBot_DataManagement_Domain.Models.Exchange", "Exchange")
                        .WithMany("Symbols")
                        .HasForeignKey("ExchangeId")
                        .HasConstraintName("exchange_id");

                    b.Navigation("Currency");

                    b.Navigation("Exchange");
                });

            modelBuilder.Entity("PredictionBot_DataManagement_Domain.Models.CalculatedParametersHistoricalData", b =>
                {
                    b.Navigation("CalculatedParametersHistoricalDataMappings");
                });

            modelBuilder.Entity("PredictionBot_DataManagement_Domain.Models.Currency", b =>
                {
                    b.Navigation("Symbols");
                });

            modelBuilder.Entity("PredictionBot_DataManagement_Domain.Models.Exchange", b =>
                {
                    b.Navigation("Symbols");
                });

            modelBuilder.Entity("PredictionBot_DataManagement_Domain.Models.HistoricalData", b =>
                {
                    b.Navigation("CalculatedParametersHistoricalDataMappings");
                });

            modelBuilder.Entity("PredictionBot_DataManagement_Domain.Models.Interval", b =>
                {
                    b.Navigation("HistoricalData");
                });

            modelBuilder.Entity("PredictionBot_DataManagement_Domain.Models.Parameter", b =>
                {
                    b.Navigation("CalculatedParametersHistoricalData");
                });

            modelBuilder.Entity("PredictionBot_DataManagement_Domain.Models.Symbol", b =>
                {
                    b.Navigation("Historicaldata");
                });
#pragma warning restore 612, 618
        }
    }
}
